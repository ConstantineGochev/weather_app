'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _d = require('d3');

var _d2 = _interopRequireDefault(_d);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactFauxDom = require('react-faux-dom');

var _reactFauxDom2 = _interopRequireDefault(_reactFauxDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Sparkline = function (_React$Component) {
  _inherits(Sparkline, _React$Component);

  function Sparkline() {
    _classCallCheck(this, Sparkline);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(Sparkline).apply(this, arguments));
  }

  _createClass(Sparkline, [{
    key: 'render',
    value: function render() {
      var _props = this.props;
      var width = _props.width;
      var height = _props.height;
      var data = _props.data;
      var interpolation = _props.interpolation;


      var el = _d2.default.select(_reactFauxDom2.default.createElement('svg')).attr(this.props).attr('data', null);

      var x = _d2.default.scale.linear().range([0, width]).domain(_d2.default.extent(data, function (d, i) {
        return i;
      }));

      var y = _d2.default.scale.linear().range([height, 0]).domain(_d2.default.extent(data, function (d) {
        return d;
      }));

      var line = _d2.default.svg.line().x(function (d, i) {
        return x(i);
      }).y(function (d) {
        return y(d);
      }).interpolate(interpolation);

      el.append('path').datum(data).attr({
        key: 'sparkline',
        className: 'sparkline',
        d: line
      });

      return el.node().toReact();
    }
  }]);

  return Sparkline;
}(_react2.default.Component);

Sparkline.propTypes = {
  width: _react2.default.PropTypes.number,
  height: _react2.default.PropTypes.number,
  data: _react2.default.PropTypes.array,
  interpolation: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.function])
};
exports.default = Sparkline;